[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=15]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=12]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 20, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVec3Uniform" id=10]
uniform_name = "fallParam"

[sub_resource type="VisualShaderNodeVectorOp" id=11]
operator = 1

[resource]
code = "shader_type spatial;
uniform vec3 fallParam;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorUniform:8
	vec3 n_out8p0 = fallParam;

// VectorOp:10
	vec3 n_in10p1 = vec3(0.00000, 20.00000, 0.00000);
	vec3 n_out10p0 = n_out8p0 * n_in10p1;

// VectorOp:9
	vec3 n_out9p0 = n_out2p0 - n_out10p0;

// Output:0
	VERTEX = n_out9p0;

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out2p1 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -85.556, 170.929 )
nodes/vertex/0/position = Vector2( 980, 180 )
nodes/vertex/2/node = SubResource( 2 )
nodes/vertex/2/position = Vector2( 100, 220 )
nodes/vertex/8/node = SubResource( 10 )
nodes/vertex/8/position = Vector2( -160, 360 )
nodes/vertex/9/node = SubResource( 11 )
nodes/vertex/9/position = Vector2( 500, 300 )
nodes/vertex/10/node = SubResource( 12 )
nodes/vertex/10/position = Vector2( 280, 460 )
nodes/vertex/connections = PoolIntArray( 2, 0, 9, 0, 9, 0, 0, 0, 8, 0, 10, 0, 10, 0, 9, 1 )
nodes/fragment/0/position = Vector2( 780, 160 )
nodes/fragment/2/node = SubResource( 15 )
nodes/fragment/2/position = Vector2( 297.444, 267.929 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
